#Permite criar e controlar m√∫ltiplas threads(linhas de c√≥digo) (pessoas) simultaneamente
import threading

# Prov√™ func√ßoes relacionadas a medida e tempo, como a espera das pessoas para
# poderem encontrar a sa√≠da
import time

#Permite usar fun√ß√µes para gerar n√∫meros aleat√≥rios. Neste projeto √© usado para
#posicionar as "pessoas" e/ou decidir o tempo de espera de cada thread da "pessoa"
import random

#D√° acesso a opera√ß√µes do sistema operacional, como limpar a tela do terminal 
import os

#Importa o decorador @dataclass, que facilita a defini√ß√£o de classes cujos objetos
#simplesmente armazenam dados, em vez de serem escritas manualmente, gerando automaticamente
#este c√≥digo
from dataclasses import dataclass

#List[int] diz ‚Äúespera-se uma lista de inteiros‚Äù, por exemplo.  
#Tuple[X, Y] indica uma tupla com dois elementos, do tipo X e Y.  
#Set[T] indica um conjunto de objetos do tipo T.  
#Optional[T] significa ‚Äúou T, ou None‚Äù (quando algo pode n√£o existir).
from typing import List, Tuple, Set, Optional

#Importa a classe base Enum, que permite definir conjuntos de constantes nomeadas.
#√â usada para representar estados como, NORMLA, EVC, FINISHED.
from enum import Enum

#Traz a estrutura de dados deque, otimizada para enfileirr e desenfileirar em ambas as pontas.
from collections import deque

#Em vez de usar n√∫meros ou strings ‚Äúsoltas‚Äù para representar estados da simula√ß√£o,
#usa-se esse Enum para garantir que s√≥ existam exatamente esses tr√™s estados poss√≠veis.  
#Em v√°rias partes do c√≥digo, testamos if state == SimulationState.NORMAL: ou
#if state == SimulationState.EVAC:, etc., tornando o c√≥digo mais claro.
class SimulationState(Enum):
    NORMAL = "normal"
    EVAC = "evacuando"
    FINISHED = "finalizado"

#vai gerar automaticamente m√©todos
#Atributos x e y  
#Representam as coordenadas de um ponto no ambiente bidimensional.  
@dataclass
class Position:
    x: int
    y: int
    
    #Define como o Python verifica se duas inst√¢ncias de Position s√£o ‚Äúiguais‚Äù.
    def __eq__(self, other):
        return self.x == other.x and self.y == other.y
    
    #Permite que objetos Position sejam usados como chaves em um set ou em um dicion√°rio (dict).  
    #Isso √© importante porque queremos armazenar, por exemplo, quais posi√ß√µes est√£o ocupadas em um Set[Position].  
    #O hash((self.x, self.y)) transforma a tupla (x, y) em um valor inteiro que identifica unicamente aquela posi√ß√£o.
    def __hash__(self):
        return hash((self.x, self.y))
    
    #Retorna a dist√¢ncia de Manhattan entre as posi√ß√µes
    #Serve para saber ‚Äúqu√£o longe‚Äù est√° uma pessoa de uma porta, aproximando quem est√° mais pr√≥ximo.
    def distance_to(self, other: 'Position') -> int:
        return abs(self.x - other.x) + abs(self.y - other.y)


class Door:
    #Armazena a posi√ß√£o da porta no ambiente.
    #Cada porta recebe um identificador inteiro √∫nico, para sabermos qual porta foi usada para evacuar cada pessoa.
    def __init__(self, position: Position, id: int):
        self.position = position
        self.id = id
        #Contador de quantas pessoas j√° passaram por esta porta.
        self.evacuated_people = 0
        #Lista que armazena o ID de cada pessoa que passou por esta porta, na ordem em que foram evacuadas.
        self.evacuated_list = []
        #Garante que, quando uma thread estiver executando , nenhuma outra thread possa modificar os mesmos dados ao mesmo tempo, 
        self.lock = threading.Lock()
    
    def evacuate_person(self, person_id: int):
        #Abre um bloco cr√≠tico: somente uma thread por vez pode entrar aqui. Se outra thread j√° estiver dentro desse bloco,
        #a nova aguardar√° at√© que a primeira saia.
        with self.lock:
            #Incrementa em 1 o contador de pessoas que sa√≠ram por esta porta
            self.evacuated_people += 1
            #Adiciona o identificador da pessoa √† lista de evacua√ß√£o desta porta
            self.evacuated_list.append(person_id)
            #Mostra no terminal uma mensagem informando qual pessoa e qual porta
            print(f"üö™ Pessoa {person_id} evacuada pela porta {self.id}")

#Modela todo o ambiente retangular, portas, pessoas, gerencia posi√ß√µes ocupadas e controla o fluxo da simula√ß√£o 
class Environment:

    #Par√¢metros de entrada
    def __init__(self, width: int, height: int, num_people: int, num_doors: int, time_limit: int):

        #Atributos de configura√ß√£o
        self.width = width
        self.height = height
        self.num_people = num_people
        self.num_doors = num_doors
        self.time_limit = time_limit
        
        #Estado inicial da simula√ß√£o: NORMAL, isto √©, antes de iniciar a evacua√ß√£o, as pessoas apenas vagueiam aleatoriamente
        self.state = SimulationState.NORMAL
        #Garante consist√™ncia, trancando para proteger leituras, j√° que v√°rias threads est√£o sendo executadas ao mesmo tempo
        self.state_lock = threading.Lock()
        
        #Conjunto de posi√ß√µes que est√£o ocupadas no momento (portas/pessoas) e checa se as posi√ß√µes est√£o ocupadas ou livres
        self.occupied_positions: Set[Position] = set()
        #Tranca para proteger altera√ß√µes nesse conjunto de occupied_positions, j√° que v√°rias threads podem tentar mover-se simultaneamente.
        self.position_lock = threading.Lock()
        
        #Ficar√° com refer√™ncias a todos os objetos Person criados.  
        self.people: List[Person] = []
        #Ficar√° com refer√™ncias a todos os objetos Portas.  
        self.doors: List[Door] = []
        #Lista dos objetos que representa cada pessoa na execu√ß√£o
        self.people_threads: List[threading.Thread] = []
        #Indicar se a simula√ß√£o est√° rodando ou n√£o. Quando for definida para False, as threads de pessoas v√£o parar de funcionar.
        self.running = True
        
        #Contador global de quantas pessoas j√° sa√≠ram pelo menos por alguma porta.
        self.total_evacuated = 0
        #Tranca para proteger acesso a total_evacuated, pois v√°rias threads podem incrementar ao mesmo tempo.  
        self.stats_lock = threading.Lock()
        #Lista de strings que registra cada evacua√ß√£o, para imprimir ‚Äúhist√≥rico‚Äù no final.  
        self.evacuation_logs = []
        #Tranca para proteger escrita nessa lista
        self.log_lock = threading.Lock()
        
        #M√©todo interno que posiciona as portas e marca essas posi√ß√µes como ocupadas.  
        self._setup_doors()
        #M√©todo interno que aloca posi√ß√µes livres para cada pessoa, cria cada objeto Person e marca essas posi√ß√µes como ocupadas.
        self._setup_people()
    
    def _setup_doors(self):
        #Cria uma lista vazia onde guardaremos todas as poss√≠veis posi√ß√µes v√°lidas para portas,isto √©,
        #todas as c√©lulas que est√£o nas bordas do grid, exceto os cantos
        possible_positions = []
        
        #Loop para bordas superior e inferior
        #Assim, estamos enumerando as posi√ß√µes intermedi√°rias das duas bordas horizontais, sem os cantos.
        for x in range(1, self.width - 1):
            possible_positions.extend([Position(x, 0), Position(x, self.height - 1)])
        
        #Loop para bordas esquerda e direita
        #Assim, cobrimos as posi√ß√µes intermedi√°rias nas bordas verticais, sem os cantos
        for y in range(1, self.height - 1):
            possible_positions.extend([Position(0, y), Position(self.width - 1, y)])
        
        #Escolha aleat√≥ria da posi√ß√£o das portas
        #Lista com posi√ß√µes ondde as portas ser√£o colocadas
        selected_positions = random.sample(possible_positions, min(self.num_doors, len(possible_positions)))
        
        #Cria√ß√£o dos objetos Door
        for i, pos in enumerate(selected_positions):
            door = Door(pos, i + 1)
            self.doors.append(door)
            #Marca a posi√ß√£o pos como ocupada, para que nenhuma pessoa possa nascer ou se mover para ali.
            self.occupied_positions.add(pos)
    
    #Posiciona um n√∫mero definido de pessoas em locais aleat√≥rios e livres dentro de um ambiente (como um cubo),
    #criando objetos Person para cada uma, e marcando essas posi√ß√µes como ocupadas.
    def _setup_people(self):
        for i in range(self.num_people):
            position = self._get_random_free_position()
            if position:
                person = Person(i + 1, position, self)
                self.people.append(person)
                self.occupied_positions.add(position)
    
    #Esse m√©todo busca, aleatoriamente, uma posi√ß√£o livre dentro do interior do grid (n√£o nas bordas).  
    def _get_random_free_position(self) -> Optional[Position]:
        #Define um limite de tentativas para evitar entrar em loop infinito caso o grid esteja muito lotado.
        max_attempts = 100
        attempts = 0
        
        #Se achar uma posi√ß√£o livre, retorna um objeto Position; caso falhe (ap√≥s 100 tentativas), retorna None.
        while attempts < max_attempts:
            x = random.randint(1, self.width - 2)
            y = random.randint(1, self.height - 2)
            #Cria um objeto de posi√ß√£o com as coordenadas sorteadas.
            pos = Position(x, y)
            
            #Adiciona a posi√ß√£o ao conjunto self.occupied_positions, marcando que agora uma pessoa ocupa aquela c√©lula.
            #Se estava ocupada, tentamos novamente at√© atingir o limite de 100.
            if pos not in self.occupied_positions:
                return pos
            
            attempts += 1
        
        return None
    
    #Retorna o estado da simula√ß√£o
    def get_state(self) -> SimulationState:
        with self.state_lock:
            return self.state
    
    #Define o estado da simula√ß√£o
    def set_state(self, new_state: SimulationState):
        with self.state_lock:
            self.state = new_state
    
    #Serve para verificar de forma segura (sincronizada) se uma dada posi√ß√£o (x, y) est√° livre (pode ser ocupada por 
    #uma pessoa que queira se mover para l√°).  
    def is_position_free(self, position: Position) -> bool:
        with self.position_lock:
            return position not in self.occupied_positions
    
    #Serve para mover a pessoa.
    #Se a nova posi√ß√£o estiver ocupada, a movimenta√ß√£o falha, se estiver livre ele remove a posi√ß√£o antiga e adiciona a nova.
    def move_person(self, person_id: int, old_pos: Position, new_pos: Position) -> bool:
        #Garante que todo o processo de verificar ‚Äúlivre‚Äù e ‚Äúatualizar conjuntos‚Äù seja at√¥mico, sem interfer√™ncia de outra thread.
        with self.position_lock:
            #Se new_pos estiver em occupied_positions, significa que j√° h√° algo (pessoa ou porta) l√°.
            if new_pos in self.occupied_positions:
                return False
            
            #Retira old_pos (posi√ß√£o antiga da pessoa) e insere new_pos, se o mesmo n√£o estiver em occupied_positions.
            self.occupied_positions.remove(old_pos)
            self.occupied_positions.add(new_pos)
            return True
    
    #Quando uma pessoa alcan√ßa a porta e √© evacuada, qremove aquela posi√ß√£o do conjunto de ocupadas, 
    #pois agora essa c√©lula deixar√° de estar ocupada pela pessoa.  
    def remove_person(self, position: Position):
        with self.position_lock:
            if position in self.occupied_positions:
                self.occupied_positions.remove(position)
    
    #Loczaliza a porta mais pr√≥xima da pessoa, buscando sempre o menor caminho
    def find_best_door_and_path(self, position: Position) -> Tuple[Optional[Door], List[Position]]:
        best_door = None
        best_path = []
        shortest_distance = float('inf')
        
        #Itera por todas as portas criadas em _setup_doors. Para cada porta, chama _find_path(start, end) para calcular um caminho vi√°vel.
        for door in self.doors:
            path = self._find_path(position, door.position)
            #Verificar se path existe e √© mais curto que o j√° encontrado  
            if path and len(path) < shortest_distance:
                shortest_distance = len(path)
                best_door = door
                best_path = path

        #Se n√£o achou caminho para nenhuma porta, best_door fica None e best_path vazio.  
        #Caso contr√°rio, ambos apontam para a solu√ß√£o √≥tima (dist√¢ncia m√≠nima).
        return best_door, best_path
    
    def _find_path(self, start: Position, end: Position) -> List[Position]:
        #Se a posi√ß√£o inicial √© exatamente a posi√ß√£o da porta desejada (caso raro, pois portas ficam nas bordas e pessoas dentro),
        #retornamos lista vazia de passos, pois n√£o precisamos nos mover.
        if start == end:
            return []
        
        #A fila (queue) cont√©m tuplas (posi√ß√£o_atual, caminho_percorrido_ate_agora).  
        #Come√ßamos com (start, []): ainda n√£o percorremos nenhum passo, caminho vazio.  
        #visited come√ßa com {start}, para n√£o revisitarmos a mesma c√©lula.
        queue = deque([(start, [])])
        visited = {start}
        
        #Dire√ß√µes poss√≠veis
        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]
        #Limite de itera√ß√µes
        max_iterations = 500
        iterations = 0
        
        #A cada passo, incrementamos iterations. 
        while queue and iterations < max_iterations:
            iterations += 1
            current, path = queue.popleft()
            
            #Calculamos as coordenadas de new_pos, vizinho de current
            for dx, dy in directions:
                new_x = current.x + dx
                new_y = current.y + dy
                new_pos = Position(new_x, new_y)
                
                #Se new_pos for exatamente a porta end  
                #Retornamos imediatamente o caminho atual concatenado com new_pos.
                #Isto fornece a primeira solu√ß√£o mais curta poss√≠vel (porque BFS garanta que exploramos em ‚Äúcamadas‚Äù)
                if new_pos == end:
                    return path + [new_pos]
                
                #Primeiro, testamos se as coordenadas est√£o dentro do grid (ou seja, n√£o estamos ‚Äúfora‚Äù do ambiente).  
                #E se new_pos ainda n√£o foi visitada (evita la√ßos infinitos).
                if (0 <= new_x < self.width and 0 <= new_y < self.height and
                    new_pos not in visited):
                    
                    #Garante que new_pos est√° dentro do interior, pois n√£o queremos que uma pessoa caminhe por fora dos limites ou encoste nas paredes.  
                    if (new_pos == end or 
                        (1 <= new_x < self.width - 1 and 1 <= new_y < self.height - 1 and 
                        #Verifica se n√£o h√° outra pessoa ou porta (exceto a porta de destino) ocupando essa posi√ß√£o.  
                        #Se ambas condi√ß√µes forem atendidas, consideramos new_pos como um vizinho v√°lido a ser colocado na fila.
                         self.is_position_free(new_pos))):
                        
                        
                        visited.add(new_pos)
                        queue.append((new_pos, path + [new_pos]))
        
        #Retornamos lista vazia, indicando ‚Äún√£o foi poss√≠vel achar um caminho vi√°vel‚Äù (pessoa presa, √°rea muito lotada, etc).
        return []
    
    #add_evacuation_log e increment_evacuated s√£o chamados quando uma pessoa efetivamente chega numa porta e se ‚Äúevacua‚Äù. Eles permitem acompanhar quem evacuou, por qual porta, e quantas pessoas j√° se foram.
    def add_evacuation_log(self, person_id: int, door_id: int):
        #Garantir que duas threads n√£o escrevam simultaneamente na lista.
        with self.log_lock:
            self.evacuation_logs.append(f"Pessoa {person_id} ‚Üí Porta {door_id}")
    
    
    #Apenas incrementa em 1 o contador global self.total_evacuated
    def increment_evacuated(self):
        with self.stats_lock:
            self.total_evacuated += 1
    
    def start_simulation(self):
        
        #Exibe no terminal informa√ß√µes como:  
        #Dimens√µes do ambiente (width x height).  
        #Quantidade de pessoas.  
        #Quantidade de portas.  
        #Tempo limite antes de come√ßar evacua√ß√£o.  
        #Coordenadas de cada porta (lista de tuplas (x, y)).
        print(f"üè¢ Iniciando simula√ß√£o:")
        print(f"   Ambiente: {self.width}x{self.height}")
        print(f"   Pessoas: {self.num_people}")
        print(f"   Portas: {self.num_doors}")
        print(f"   Tempo limite: {self.time_limit}s")
        print(f"   Posi√ß√µes das portas: {[(d.position.x, d.position.y) for d in self.doors]}")
        print()
        
        #Cria√ß√£o de threads para cada pessoa
        for person in self.people:
            thread = threading.Thread(target=person.run)
            self.people_threads.append(thread)
            thread.start()
        
        #Cria√ß√£o de thread de monitoramento de status
        #Limpa a tela e imprime o ‚Äúmapa‚Äù do ambiente, mostrando posi√ß√µes de pessoas, portas, logs de evacua√ß√£o parciais etc.
        #Ela roda em paralelo √†s threads das pessoas para atualizar a visualiza√ß√£o a cada segundo.
        status_thread = threading.Thread(target=self._status_monitor)
        status_thread.start()
        
        #Aguardar time_limit segundos antes de iniciar evacua√ß√£o
        time.sleep(self.time_limit)
        
        #Trocar estado para EVAC
        self.set_state(SimulationState.EVAC)
        print(f"\nüö® EVACUA√á√ÉO INICIADA! Tempo limite atingido.")

        #Espera para terminar evacua√ß√£o ou tempo extra esgotar
        #Definimos um tempo adicional de at√© 30 segundos (evacuation_timeout) para que todas as pessoas tenham chance de fugir ap√≥s a ordem de evacua√ß√£o. 
        evacuation_timeout = 30
        start_time = time.time()
        
        #Continuamos em loop (que dorme 0.5s por itera√ß√£o para n√£o consumir CPU demais) enquanto:
        #self.total_evacuated < self.num_people (h√° ainda pessoas dentro).
        #- E ainda n√£o se passaram 30 segundos desde start_time.  
        #Quando uma dessas condi√ß√µes falhar (todas evacuadas ou 30s passarem), sa√≠mos do loop.
        while (self.total_evacuated < self.num_people and 
               time.time() - start_time < evacuation_timeout):
            time.sleep(0.5)
        
        #Parar as threads e fixar estado final
        self.running = False
        self.set_state(SimulationState.FINISHED)
        
        
        #thread.join() faz a thread principal (que est√° executando start_simulation) aguardar at√© que cada thread de pessoa termine.  
        #O timeout=2 significa que, se a thread n√£o terminar em 2 segundos, prosseguimos mesmo assim.
        for thread in self.people_threads:
            thread.join(timeout=2)
        
        #- Mesma ideia: aguardamos at√© 2 segundos para a thread de monitor de status parar.  
        #Quando self.running = False e state == FINISHED, o m√©todo _status_monitor sai de seu loop e encerra.
        status_thread.join(timeout=2)
        
        #Imprimir estat√≠sticas finais
        #Chama m√©todo que formata e exibe informa√ß√µes sobre quantas pessoas foram evacuadas, taxa de sucesso, quantas por cada porta, lista completa de logs etc.
        self._print_final_stats()
    
    def _status_monitor(self):
        #Loop que roda enquanto a simula√ß√£o estiver em progresso  
        #Quando a simula√ß√£o termina (todas evacuadas ou timeout), atribuiremos self.running = False no start_simulation e tamb√©m colocaremos state = FINISHED.
        #Esse loop rodar√° a cada 1 segundo (time.sleep(1)), fazendo dois passos:
        while self.running and self.get_state() != SimulationState.FINISHED:
            #Limpa o terminal para desenhar tudo de novo.
            self._clear_screen()
            #Desenha o estado atual do grid (mapa), mostrando paredes, portas, pessoas, e algumas estat√≠sticas no terminal.
            #Faz isso de forma textual, utilizando emojis para representar cada c√©lula
            self._print_environment()
            #Aguarda 1 segundo antes de limpar e imprimir de novo.
            #Paralelamente, pessoas continuam se movendo (em threads separadas).
            time.sleep(1)
    
    #Limpa o terminal  
    def _clear_screen(self):
        os.system('cls' if os.name == 'nt' else 'clear')
    
    def _print_environment(self):
        #Mostra o estado atual 
        print(f"Estado: {self.get_state().value.upper()}")
        #Mostra quantas pessoas j√° evacuaram sobre o total.  
        print(f"Evacuados: {self.total_evacuated}/{self.num_people}")
        #Linha em branco para separar impress√£o do grid.
        print()
        
        #Construir uma matriz 
        #Cria uma lista de listas (height linhas √ó width colunas), preenchida com o emoji ‚Äú‚¨ú‚Äù 
        grid = [['‚¨ú' for _ in range(self.width)] for _ in range(self.height)]
        
        #Desenhar as paredes nas bordas com ‚Äú‚¨õ‚Äù 
        #Primeira coluna (x = 0) e √∫ltima coluna (x = width-1) recebem ‚Äú‚¨õ‚Äù em todas as linhas. 
        for x in range(self.width):
            grid[0][x] = '‚¨õ'
            grid[self.height-1][x] = '‚¨õ'
        
         #Primeira linha (y = 0) e √∫ltima linha (y = height-1) recebem ‚Äú‚¨õ‚Äù em todas as colunas, indicando parede.
        for y in range(self.height):
            grid[y][0] = '‚¨õ'
            grid[y][self.width-1] = '‚¨õ'
        
        #Para cada porta, substitu√≠mos o ‚Äú‚¨ú‚Äù ou ‚Äú‚¨õ‚Äù
        for door in self.doors:
            grid[door.position.y][door.position.x] = f'üö™'
        
        with self.position_lock:
            #Pergunta ‚Äúpara cada posi√ß√£o em occupied_positions, se essa posi√ß√£o n√£o for de uma porta (ou seja, for uma pessoa), desenhe ‚Äúüë§‚Äù nessa c√©lula.
            for pos in self.occupied_positions:
                #O teste pos not in [door.position for door in self.doors] verifica se n√£o √© uma porta (caso fosse porta, j√° desenhamos no passo anterior).
                if pos not in [door.position for door in self.doors]:
                    #Teste extra 0 <= pos.y < height e 0 <= pos.x < width apenas para evitar exce√ß√µes caso algo estranho tenha acontecido (por seguran√ßa).
                    if 0 <= pos.y < self.height and 0 <= pos.x < self.width:
                        grid[pos.y][pos.x] = 'üë§'
        
        #Para cada lista row de emojis, unimos os emojis com um espa√ßo em branco no meio e imprimimos.  
        #Isso gera um ‚Äúmapa‚Äù visual de todo o ambiente.
        for row in grid:
            print(' '.join(row))
        
        #Exibir estat√≠sticas por porta
        #Uma linha em branco e, para cada porta, mostramos quantas pessoas j√° passaram por ela (o contador interno de cada Door).
        print()
        for door in self.doors:
            print(f"Porta {door.id}: {door.evacuated_people} pessoas evacuadas")
        
        #Exibir os √∫ltimos 5 logs de evacua√ß√£o  
        with self.log_lock:
            if self.evacuation_logs:
                #Se algum log existir, imprime t√≠tulo ‚Äú√öltimas evacua√ß√µes:‚Äù e lista as √∫ltimas 5 entradas de evacuation_logs, cada uma com uma indenta√ß√£o extra para facilitar leitura.
                print("\nüìù √öltimas evacua√ß√µes:")
                for log in self.evacuation_logs[-5:]:
                    print(f"   {log}")
    
    def _print_final_stats(self):
        #Imprime uma linha de 50 sinais ‚Äú=‚Äù, depois ‚ÄúSIMULA√á√ÉO FINALIZADA‚Äù, depois mais 50 ‚Äú=‚Äù para destacar a se√ß√£o.
        print(f"\n{'='*50}")
        print(f"SIMULA√á√ÉO FINALIZADA")
        print(f"{'='*50}")
        #Mostra quantas pessoas existiam no in√≠cio, quantas foram evacuadas (pode ser menor que total se alguma n√£o conseguiu sair no tempo extra), e calcula a porcentagem de evacua√ß√£o com uma casa decimal.
        print(f"Total de pessoas: {self.num_people}")
        print(f"Pessoas evacuadas: {self.total_evacuated}")
        print(f"Taxa de evacua√ß√£o: {(self.total_evacuated/self.num_people)*100:.1f}%")
        print()
        
        #Para cada porta, indica quantas pessoas passaram por ela. 
        #Se aquela porta tem uma lista de IDs (evacuated_list) n√£o vazia, converte essa lista em string separada por v√≠rgulas e imprime quais IDs de pessoas usaram essa porta.
        print("üìä Evacua√ß√£o por porta:")
        for door in self.doors:
            print(f"  Porta {door.id}: {door.evacuated_people} pessoas")
            if door.evacuated_list:
                people_str = ", ".join(map(str, door.evacuated_list))
                print(f"    ‚îî‚îÄ Pessoas: {people_str}")
        
        #Exibe todas as entradas de self.evacuation_logs (cada pessoa que saiu e a porta usada), em ordem cronol√≥gica
        print("\nüìù Hist√≥rico completo de evacua√ß√µes:")

        with self.log_lock:
            for log in self.evacuation_logs:
                print(f"   {log}")

#Cada inst√¢ncia de Person representa uma pessoa que exista no ambiente e que seja executada em sua pr√≥pria thread.
#Ela carrega a l√≥gica de movimenta√ß√£o aleat√≥ria (fase NORMAL) e de evacua√ß√£o (fase EVAC), buscando o melhor caminho at√© uma porta.
class Person:
    def __init__(self, id: int, position: Position, environment: Environment):
        #Armazena o identificador desta pessoa (1, 2, 3, ...)
        self.id = id
        #Posicionamento inicial (um objeto Position) onde a pessoa ‚Äúnasceu‚Äù.
        self.position = position
        #Guarda refer√™ncia ao objeto Environment, para poder consultar estado, mover-se, achar portas, atualizar logs, etc.
        self.environment = environment
        #Tempo de espera (em segundos) entre cada passo de movimenta√ß√£o dessa pessoa. √â escolhido aleatoriamente entre 0.5 e 1.5 segundos.  
        #Isso faz com que cada pessoa se mova em velocidades ligeiramente diferentes, deixando a simula√ß√£o mais realista.
        self.move_delay = random.uniform(0.5, 1.5)
        #Quando come√ßa a evacua√ß√£o, a pessoa calcular√° um ‚Äúcaminho‚Äù at√© a porta, armazenando-o em current_path. Se estiver vazia, significa que ainda n√£o calculou ou que precisa recalcular.
        self.current_path = []
        #armazena a refer√™ncia ao objeto Door que est√° mirando para evacuar. Inicialmente None.
        self.target_door = None
    
    def run(self):
        #Enquanto o ambiente (Environment) estiver rodando (running == True), a pessoa continua ativa.  
        #Quando Environment definir running = False, o la√ßo termina e o m√©todo run finaliza, encerrando a thread.
        while self.environment.running:
            #Consulta de forma segura (com lock interno) o valor de Environment.state. Pode ser NORMAL, EVAC ou FINISHED.
            state = self.environment.get_state()
            #Se estado for NORMAL :
            #Chama o m√©todo _random_movement(), que tenta mover a pessoa para um vizinho aleat√≥rio caso esteja livre.
            if state == SimulationState.NORMAL:
                self._random_movement()
            #Se estado for EVAC 
            #Chama m√©todo _evacuate(). Esse m√©todo tentar√° colocar a pessoa em movimento ao longo de um caminho calculado at√© a porta.  
            #Se _evacuate() retorna True, significa que a pessoa conseguiu chegar na porta e foi evacuada. Nesse caso, quebramos (break) o la√ßo e terminamos a thread.
            elif state == SimulationState.EVAC:
                if self._evacuate():
                    break
            #Se estado for FINISHED
            #Caso a simula√ß√£o tenha sido marcada como finalizada (por timeout geral), encerramos a thread sem tentar mover ou evacuar.
            elif state == SimulationState.FINISHED:
                break
            
            #Faz com que cada itera√ß√£o (movimento aleat√≥rio ou tentativa de evacuar) ocorra ap√≥s um pequeno atraso espec√≠fico de cada pessoa, armazenado em self.move_delay.  
            #Isso evita que todas as pessoas se movimentem ‚Äúao mesmo tempo exato‚Äù.
            time.sleep(self.move_delay)
    
    def _random_movement(self):
        #Gerar lista de poss√≠veis vizinhos livres
        #Retorna uma lista de objetos Position vizinhos (cima, baixo, esquerda, direita) que estejam livres (n√£o ocupadas por outra pessoa ou porta)
        possible_moves = self._get_possible_moves()
        #Se houver ao menos um vizinho dispon√≠vel
        #Selecionamos aleatoriamente (random.choice) uma das posi√ß√µes livres
        if possible_moves:
            new_position = random.choice(possible_moves)
            #Tentar mover a pessoa para new_position  
            if self.environment.move_person(self.id, self.position, new_position):
                self.position = new_position
    
    #Esse m√©todo gerencia a l√≥gica de evacua√ß√£o, passo a passo
    def _evacuate(self) -> bool:
        #Se ainda n√£o calculamos caminho ou porta de destino 
        #Quando entramos na primeira vez em evacua√ß√£o, current_path est√° vazio e target_door √© None. 
        if not self.current_path or not self.target_door:
            #Chamamos find_best_door_and_path(self.position) para obter:  
            #self.target_door: a melhor porta (objeto Door) para evacuar.  
            #self.current_path: uma lista de objetos Position correspondentes ao caminho (em numero m√≠nimo de passos).  
            self.target_door, self.current_path = self.environment.find_best_door_and_path(self.position)
            
            #Se n√£o existirem portas acess√≠veis (por congestionamento), target_door ser√° None ou current_path vazio. Nesse caso, n√£o conseguimos evacuar, retornamos False e tentaremos de novo na pr√≥xima itera√ß√£o do la√ßo.
            if not self.target_door or not self.current_path:
                return False
        
        #Checar se o pr√≥ximo passo est√° a uma dist√¢ncia de 1
        #Distance_to(...) == 1 garante que essa posi√ß√£o √© adjacente (vizinha) √† posi√ß√£o atual.
        if self.current_path and self.position.distance_to(self.current_path[0]) == 1:
            #Obter e remover o primeiro passo (pop)  
            next_position = self.current_path.pop(0)
            
            #Se next_position for exatamente a posi√ß√£o da porta significa que a pessoa est√° chegando √† porta.
            #Chamamos self.target_door.evacuate_person(self.id), que atualiza n√∫mero de pessoas daquela porta e lista de IDs, e imprime uma mensagem ‚ÄúPessoa X evacuada pela porta Y‚Äù.  
            if next_position == self.target_door.position:
                self.environment.remove_person(self.position)
                self.target_door.evacuate_person(self.id)
                #Registramos no log geral (add_evacuation_log) qual pessoa e qual porta.
                #Incrementamos o contador global  
                self.environment.add_evacuation_log(self.id, self.target_door.id)
                self.environment.increment_evacuated()
                return True
            
            #Caso False, tentar efetuar o movimento para next_position  
            #Se retornar True (movimento bem-sucedido), atualizamos self.position.  
            #Se retornar False (algu√©m ocupou aquele espa√ßo no instante exato), ‚Äúestragamos‚Äù o caminho: atribu√≠mos current_path = [] e target_door = None, de modo que seremos for√ßados a recalcular tudo na pr√≥xima chamada de _evacuate(), pois a rota est√° bloqueada.
            if self.environment.move_person(self.id, self.position, next_position):
                self.position = next_position
                #Significa que, por algum motivo, current_path n√£o est√° sincronizado com a posi√ß√£o atual (talvez a pessoa tenha sido empurrada/teletransportada, ou rota ficou obsoleta).  
                #Reinicializa rota e porta, para que na pr√≥xima itera√ß√£o seja requerido novo c√°lculo.
            else:
                self.current_path = []
                self.target_door = None
        else:
            self.current_path = []
            self.target_door = None
        
        #Se n√£o chegamos √† porta neste passo, retornamos False, o que faz com que, no la√ßo de run(), continuemos tentando evacuar, mas a thread n√£o encerra ainda.
        return False
    
    def _get_possible_moves(self) -> List[Position]:
        #Acumular√° posi√ß√µes adjacentes dispon√≠veis para mover
        moves = []
        #Dire√ß√µes a se mover
        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]
        
        #Calcula coordenadas new_x, new_y de new_pos
        for dx, dy in directions:
            new_x = self.position.x + dx
            new_y = self.position.y + dy
            
            #Limitar movimento apenas ao interior (n√£o nas bordas)
            #Se a c√©lula vizinha est√° dentro da faixa [1, width-2] e [1, height-2], ou seja, n√£o ultrapassa as paredes.  
            #Se estiv√©ssemos no limite (x=0 ou x=width-1), seria parede. Logo, pessoas n√£o andam em cima das paredes.
            if (1 <= new_x < self.environment.width - 1 and 
                1 <= new_y < self.environment.height - 1):
                
                #Cria objeto Position.  
                #Pergunta ao ambiente: ‚Äúest√° livre?‚Äù  
                #Se sim, adiciona √† lista de poss√≠veis movimentos.
                new_pos = Position(new_x, new_y)
                if self.environment.is_position_free(new_pos):
                    moves.append(new_pos)
        
        return moves


#interage com o usu√°rio por meio do terminal, l√™ par√¢metros, cria o Environment e chama start_simulation().
def main():
    #Mostra t√≠tulo do programa no terminal
    print("=== SIMULA√á√ÉO DE EVACUA√á√ÉO COM THREADS ===\n")
    
    
    try:
        #Par√¢metros setados pelo usu√°rio    
        width = int(input("Largura do ambiente (m√≠nimo 10): ") or "15")
        height = int(input("Altura do ambiente (m√≠nimo 10): ") or "10")
        num_people = int(input("N√∫mero de pessoas (m√°ximo 20): ") or "8")
        num_doors = int(input("N√∫mero de portas (m√≠nimo 2): ") or "3")
        time_limit = int(input("Tempo limite em segundos (antes da evacua√ß√£o): ") or "10")
        
        #Ajustes / valida√ß√µes
        width = max(10, width)
        height = max(10, height)
        num_people = min(20, max(1, num_people))
        num_doors = max(2, min(num_doors, (width + height - 4) * 2))
        time_limit = max(5, time_limit)
        
        #Mostra o que de fato ser√° usado, ap√≥s ajustes.
        print(f"\nPar√¢metros confirmados:")
        print(f"Ambiente: {width}x{height}")
        print(f"Pessoas: {num_people}")
        print(f"Portas: {num_doors}")
        print(f"Tempo limite: {time_limit}s")
        
        #Pausa at√© o usu√°rio apertar Enter, para que ele veja os par√¢metros e esteja pronto.
        input("\nPressione Enter para iniciar...")
        
        #Instancia o ambiente com todos os dados fornecidos.  
        #Chama o m√©todo que realmente gerencia todo o ciclo de simula√ß√£o (start_simulation(self))
        environment = Environment(width, height, num_people, num_doors, time_limit)
        environment.start_simulation()

    #Se o usu√°rio apertar Ctrl+C no meio do input ou durante a simula√ß√£o, o programa exibir√° ‚ÄúSimula√ß√£o interrompida pelo usu√°rio.‚Äù  
    except KeyboardInterrupt:
        print("\n\nSimula√ß√£o interrompida pelo usu√°rio.")
    #Se acontecer qualquer outro erro, ser√° exibida mensagem ‚ÄúErro durante a simula√ß√£o: <descri√ß√£o do erro>‚Äù.    
    except Exception as e:
        print(f"\nErro durante a simula√ß√£o: {e}")

#Essa linha faz com que a fun√ß√£o main() seja executada somente quando este arquivo for executado como programa principal (n√£o quando for importado como m√≥dulo por outro arquivo).  
#Ent√£o, se voc√™ executar python nome_do_arquivo.py, ele vai entrar nesse if e chamar main(). Se voc√™ importar esse script em outro arquivo, o main() n√£o ser√° chamado automaticamente.
if __name__ == "__main__":
    main()